generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int             @id @default(autoincrement())
  username String          @unique
  email    String          @unique
  password String
  role     String          @default("user")
  cart     Cart?
  reviews  ProductReview[]
}

model Product {
  id            Int             @id @default(autoincrement())
  image         String?
  title         String?
  description   String?
  category      String?
  brand         String?
  price         Float?
  salePrice     Float?
  totalStock    Int?
  averageReview Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cartItems     CartItem[]
  reviews       ProductReview[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  orders    Order[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    String
  address   String
  city      String
  pincode   String
  phone     String
  notes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders  Order[]
}

model ProductReview {
  id            String   @id @default(uuid())
  productId     Int // changed from String to Int
  userId        Int // changed from String to Int
  userName      String
  reviewMessage String
  reviewValue   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Feature {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Order {
  id              String       @id @default(uuid())
  userId          String
  cartId          Int
  cartItems       CartItem   @relation(fields: [cartId], references: [id])
  addressInfoId   Int
  addressInfo     Address    @relation(fields: [addressInfoId], references: [id])
  orderStatus     String
  paymentMethod   String
  paymentStatus   String
  totalAmount     Float
  orderUpdateDate DateTime    
  orderDate       DateTime    
  paymentId       String?
  payerId         String?

  createdAt       DateTime    @default(now())
}



